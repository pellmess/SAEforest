// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calc_indicatC
NumericVector calc_indicatC(NumericVector Y, double threshold, Rcpp::Nullable<Rcpp::IntegerVector> custom);
RcppExport SEXP _SAEforest_calc_indicatC(SEXP YSEXP, SEXP thresholdSEXP, SEXP customSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type custom(customSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_indicatC(Y, threshold, custom));
    return rcpp_result_gen;
END_RCPP
}
// smear_fun
NumericVector smear_fun(NumericVector popSize, List unit_preds, NumericVector oob_res, double threshold);
RcppExport SEXP _SAEforest_smear_fun(SEXP popSizeSEXP, SEXP unit_predsSEXP, SEXP oob_resSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type popSize(popSizeSEXP);
    Rcpp::traits::input_parameter< List >::type unit_preds(unit_predsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type oob_res(oob_resSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(smear_fun(popSize, unit_preds, oob_res, threshold));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SAEforest_calc_indicatC", (DL_FUNC) &_SAEforest_calc_indicatC, 3},
    {"_SAEforest_smear_fun", (DL_FUNC) &_SAEforest_smear_fun, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_SAEforest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
